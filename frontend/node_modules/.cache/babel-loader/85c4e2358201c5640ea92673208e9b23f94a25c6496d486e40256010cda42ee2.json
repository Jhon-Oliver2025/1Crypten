{"ast":null,"code":"import axios from 'axios';\nexport const getSignals = async () => {\n  try {\n    const response = await axios.get('http://localhost:5000/backend/sinais_lista.csv');\n    return response.data.split('\\n').slice(1) // pula o cabeçalho\n    .map(line => {\n      const [symbol, type, entry_price, entry_time, target_price, target_exit_time, status, exit_price, variation, result, quality_score, signal_class, trend_score, alignment_score, market_score, strategy_info, trend_timeframe, entry_timeframe] = line.split(',');\n      return {\n        symbol,\n        type,\n        entry_price: parseFloat(entry_price),\n        target_price: parseFloat(target_price),\n        status,\n        quality_score: parseFloat(quality_score),\n        signal_class,\n        strategy_info\n      };\n    }).filter(signal => signal.symbol); // remove linhas vazias\n  } catch (error) {\n    console.error('Erro ao buscar sinais:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getSignals","response","get","data","split","slice","map","line","symbol","type","entry_price","entry_time","target_price","target_exit_time","status","exit_price","variation","result","quality_score","signal_class","trend_score","alignment_score","market_score","strategy_info","trend_timeframe","entry_timeframe","parseFloat","filter","signal","error","console"],"sources":["C:/Users/spcom/Desktop/Sistema7.2/frontend/src/services/signalsService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getSignals = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:5000/backend/sinais_lista.csv');\r\n    return response.data.split('\\n')\r\n      .slice(1) // pula o cabeçalho\r\n      .map(line => {\r\n        const [\r\n          symbol, type, entry_price, entry_time, target_price, target_exit_time,\r\n          status, exit_price, variation, result, quality_score, signal_class,\r\n          trend_score, alignment_score, market_score, strategy_info,\r\n          trend_timeframe, entry_timeframe\r\n        ] = line.split(',');\r\n        \r\n        return {\r\n          symbol,\r\n          type,\r\n          entry_price: parseFloat(entry_price),\r\n          target_price: parseFloat(target_price),\r\n          status,\r\n          quality_score: parseFloat(quality_score),\r\n          signal_class,\r\n          strategy_info\r\n        };\r\n      })\r\n      .filter(signal => signal.symbol); // remove linhas vazias\r\n  } catch (error) {\r\n    console.error('Erro ao buscar sinais:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,gDAAgD,CAAC;IAClF,OAAOD,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,CAC7BC,KAAK,CAAC,CAAC,CAAC,CAAC;IAAA,CACTC,GAAG,CAACC,IAAI,IAAI;MACX,MAAM,CACJC,MAAM,EAAEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,YAAY,EAAEC,gBAAgB,EACrEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,aAAa,EAAEC,YAAY,EAClEC,WAAW,EAAEC,eAAe,EAAEC,YAAY,EAAEC,aAAa,EACzDC,eAAe,EAAEC,eAAe,CACjC,GAAGlB,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;MAEnB,OAAO;QACLI,MAAM;QACNC,IAAI;QACJC,WAAW,EAAEgB,UAAU,CAAChB,WAAW,CAAC;QACpCE,YAAY,EAAEc,UAAU,CAACd,YAAY,CAAC;QACtCE,MAAM;QACNI,aAAa,EAAEQ,UAAU,CAACR,aAAa,CAAC;QACxCC,YAAY;QACZI;MACF,CAAC;IACH,CAAC,CAAC,CACDI,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACpB,MAAM,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}